import { CLI_DEFAULT_CONFIG } from './../config';
import { main } from '../utils/schematics-cli';
import { VIEW_CONFIG } from './../../../src/config/view.config';
import { ViewDirCliItem } from '../config';
import { createConsoleLogger } from '@angular-devkit/core/node';
import { terminal } from '@angular-devkit/core';

generateView();

async function generateView() {
  const dirs: ViewDirCliItem[] = VIEW_CONFIG.dirs;

  const logger = createConsoleLogger(false);

  if (!dirs || !dirs.length) return;
  for (let i = 0; i < dirs.length; i++) {
    try {
      await callSchematics(dirs[i]);
    } catch (e) {
      logger.warn(e.message);
    }
  }
}

async function callSchematics(dir: ViewDirCliItem, parentDir?: ViewDirCliItem) {
  findTypeError(dir, parentDir);

  const moduleName = parentDir ? parentDir.name : '';
  const componentHostPath = dir ? dir.parentPath : '';
  switch (dir.type) {
    case 'Module':
      await main({
        args: ['cli:module', `--name=${dir.name}`],
        isAutoGenerated: true
      });
      break;
    case 'Page':
      await main({
        args: ['cli:view', `--name=${dir.name}`, `--module=${moduleName}`],
        isAutoGenerated: true
      });
      break;
    case 'Crud':
      await main({
        args: [
          'cli:crud-template',
          `--name=${dir.name}`,
          `--module=${moduleName}`
        ],
        isAutoGenerated: true
      });
      break;
    case 'Component':
      await main({
        args: [
          'cli:dependent-component',
          `--name=${dir.name}`,
          `--hostPath=${CLI_DEFAULT_CONFIG.viewPath}/${componentHostPath}`
        ],
        isAutoGenerated: true
      });
  }

  if (dir.child) {
    for (let i = 0; i < dir.child.length; i++) {
      const child = dir.child[i];
      if (parentDir) {
        if (parentDir.type === 'Module') {
          child.parentPath = `${dir.parentPath}/${dir.name}`;
        } else if (parentDir.type === 'Component') {
          child.parentPath = `${dir.parentPath}/components/${dir.name}`;
        } else {
          child.parentPath = `${dir.parentPath}/src/components/${dir.name}`;
        }
      } else {
        child.parentPath = dir.name;
      }
      await callSchematics(child, dir);
    }
  }
}

function findTypeError(dir: ViewDirCliItem, parentDir?: ViewDirCliItem) {
  if (parentDir && dir.type === 'Module') {
    throw new Error(
      `${terminal.red('ERROR')} module:${dir.name}不能写在child中！`
    );
  }
  if ((dir.type === 'Page' || dir.type === 'Crud') && parentDir && parentDir.type !== 'Module') {
    throw new Error(
      `${terminal.red('ERROR')} page:${dir.name}只能在是module的child中！`
    );
  }
  if (
    dir.type === 'Component' &&
    (!parentDir ||
      !(
        parentDir.type === 'Page' ||
        parentDir.type === 'Crud' ||
        parentDir.type === 'Component'
      ))
  ) {
    throw new Error(
      `${terminal.red('ERROR')} component:${dir.name}不能写在model或者顶层！`
    );
  }
}
